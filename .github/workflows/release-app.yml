name: "Deploy App on Release Publication"

on:
  release:
    types: [published]

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      short-sha: ${{ steps.extract-short-sha.outputs.short-sha }}
    steps:
      - name: Check if this is an app release
        id: check-app-release
        run: |
          if [[ "${{ github.event.release.tag_name }}" == app-* ]]; then
            echo "is-app-release=true" >> $GITHUB_OUTPUT
            echo "This is an app release: ${{ github.event.release.tag_name }}"
          else
            echo "is-app-release=false" >> $GITHUB_OUTPUT
            echo "This is not an app release: ${{ github.event.release.tag_name }}"
          fi

      - name: Extract version from tag
        id: extract-version
        if: steps.check-app-release.outputs.is-app-release == 'true'
        run: |
          # Extract version from tag (e.g., app-42 -> 42)
          VERSION=${GITHUB_REF#refs/tags/app-}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Extract short SHA
        id: extract-short-sha
        run: |
          # Extract first 7 characters of the commit SHA
          SHORT_SHA=${GITHUB_SHA:0:7}
          echo "short-sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "Extracted short SHA: $SHORT_SHA"

  send-initial-notification:
    runs-on: ubuntu-latest
    needs: extract-version
    if: needs.extract-version.outputs.version != ''
    outputs:
      thread-ts: ${{ steps.capture-ts.outputs.ts }}
    steps:
      - name: Escape release body for JSON
        id: escape-body
        run: |
          # Escape the release body for JSON
          ESCAPED_BODY=$(echo '${{ github.event.release.body }}' | sed 's/\\/\\\\/g; s/"/\\"/g; s/\r//g; s/$/\\n/g' | tr -d '\n' | sed 's/\\n$//')
          echo "body=$ESCAPED_BODY" >> $GITHUB_OUTPUT

      - name: Send initial deployment notification
        id: initial-notification
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_DEPLOY_BOT_TOKEN }}
          payload: |
            {
              "channel": "C09E92UBPU3",
              "text": "Starting deployment of App Release...",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket_shipit_party: <https://app.getsurface.ai|App> (API/UI) Release Deployment Started..."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Release:*\n<${{ github.event.release.html_url }}|App Release ${{ needs.extract-version.outputs.version }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n`${{ github.ref_name }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ needs.extract-version.outputs.short-sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n@${{ github.actor }}"
                    },
                                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n ‚è≥ In progress..."
                    },
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release Notes:*\n```${{ steps.escape-body.outputs.body }}```"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Deployment to production environment in progress..."
                    }
                  ]
                }
              ]
            }

      - name: Capture thread timestamp
        id: capture-ts
        run: |
          # The slackapi/slack-github-action should provide the ts in outputs
          if [ -n "${{ steps.initial-notification.outputs.ts }}" ]; then
            echo "ts=${{ steps.initial-notification.outputs.ts }}" >> $GITHUB_OUTPUT
            echo "Captured thread timestamp: ${{ steps.initial-notification.outputs.ts }}"
          else
            echo "Warning: No thread timestamp captured from Slack response"
            echo "ts=" >> $GITHUB_OUTPUT
          fi

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [extract-version, send-initial-notification]
    if: needs.extract-version.outputs.version != ''
    outputs:
      result: success
    steps:
      - name: Mock deployment to production
        run: |
          echo "üöÄ Mock deployment started for App Release ${{ needs.extract-version.outputs.version }}"
          echo "üì¶ Namespace: prod"
          echo "üîß Service: surfaceapi"
          echo "üåç AWS Region: us-east-1"
          echo "‚ò∏Ô∏è  Cluster: surface-eks-prod-m0GTCkAK"
          echo "üè∑Ô∏è  Tag: ${{ needs.extract-version.outputs.version }}"
          echo ""
          echo "‚è≥ Simulating deployment process..."
          sleep 5
          echo "‚úÖ Mock deployment completed successfully!"
          echo "üéâ App Release ${{ needs.extract-version.outputs.version }} is now live in production!"

  send-completion-notification:
    runs-on: ubuntu-latest
    needs: [extract-version, send-initial-notification, deploy-to-production]
    if: always() && needs.extract-version.outputs.version != ''
    steps:
      - name: Escape release body for JSON
        id: escape-body
        run: |
          # Escape the release body for JSON
          ESCAPED_BODY=$(echo '${{ github.event.release.body }}' | sed 's/\\/\\\\/g; s/"/\\"/g; s/\r//g; s/$/\\n/g' | tr -d '\n' | sed 's/\\n$//')
          echo "body=$ESCAPED_BODY" >> $GITHUB_OUTPUT

      - name: Debug thread timestamp
        run: |
          echo "Debug: Thread timestamp from initial notification: '${{ needs.send-initial-notification.outputs.thread-ts }}'"
          echo "Debug: Deploy result: '${{ needs.deploy-to-production.result }}'"

      - name: Update deployment notification
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.update
          token: ${{ secrets.SLACK_DEPLOY_BOT_TOKEN }}
          payload: |
            {
              "channel": "C09E92UBPU3",
              "text": "${{ needs.deploy-to-production.result == 'success' && '‚úÖ' || '‚ùå' }} App Release ${{ needs.extract-version.outputs.version }} deployment ${{ needs.deploy-to-production.result == 'success' && 'completed successfully' || 'failed' }}",
              "ts": "${{ needs.send-initial-notification.outputs.thread-ts }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ needs.deploy-to-production.result == 'success' && '‚úÖ <https://app.getsurface.ai|App> (API/UI) Release Deployment Success' || '‚ùå <https://app.getsurface.ai|App> (API/UI) Release Deployment Failed' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Release:*\n<${{ github.event.release.html_url }}|App Release ${{ needs.extract-version.outputs.version }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Tag:*\n`${{ github.ref_name }}`"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ needs.extract-version.outputs.short-sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n@${{ github.actor }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:*\n${{ needs.deploy-to-production.result == 'success' && '‚úÖ Successfully deployed' || '‚ùå Deployment failed' }}"
                    },
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release Notes:*\n```${{ steps.escape-body.outputs.body }}```"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ needs.deploy-to-production.result == 'success' && 'üéâ App is now live in production! <https://app.getsurface.ai|https://app.getsurface.ai> ' || '‚ö†Ô∏è Check the deployment logs for details on the failure.' }}"
                    }
                  ]
                }
              ]
            }
